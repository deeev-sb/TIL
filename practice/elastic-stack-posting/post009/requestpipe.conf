input {
  pipeline { address => requestdata }
}

filter {
  grok {
    match => { "message" => "^(?m)%{GREEDYDATA:request_info} data=\[%{GREEDYDATA:data}\]" }
  }
  kv {
    source => "request_info"
    field_split => " "
    value_split => "="
    target => "request_info"
  }
  json {
    source => "data"
    target => "[request_info][data]"
  }
  
  mutate {
    remove_field => ["data"]
  }
  
  ruby {
    code => '
      def convert_to_location(event, field)
        value = event.get("[request_info][data][#{field}]")
        if value.is_a?(String)
          coordinates = value.split(/[|;]/).map { |coord| coord.split(",") }
          points = coordinates.map do |coords|
            lng = coords[1].to_f
            lat = coords[0].to_f
            { "lon" => lng, "lat" => lat }
          end
          event.set("[request_info][data][#{field}]", points)
        elsif value.is_a?(Array)
          points = value.map do |point|
            lng = point["lng"] || point["lon"] || point["x"] || point["XPos"]
            lat = point["lat"] || point["y"] || point["YPos"]
            if lng.is_a?(Numeric) && lat.is_a?(Numeric)
              { "lon" => lng, "lat" => lat }
            else
              point
            end
          end
          event.set("[request_info][data][#{field}]", points)
        elsif value.is_a?(Hash)
          lng = value["lng"] || value["lon"] || value["x"] || value["XPos"]
          lat = value["lat"] || value["y"] || value["YPos"]
          if lng.is_a?(Numeric) && lat.is_a?(Numeric)
            event.set("[request_info][data][#{field}]", { "lon" => lng, "lat" => lat })
          end
        end
      end

      ["location", "latlng", "origin", "origins", "destination", "destinations", "waypoints", "StartPoint", "GoalPoint", "ViaPoint", "ViaPoints", "SPoint", "EPoint", "SPointList", "points"].each do |field|
        convert_to_location(event, field)
      end
    '
  }
}

output {
  pipeline { send_to => [dateplugin] }
}