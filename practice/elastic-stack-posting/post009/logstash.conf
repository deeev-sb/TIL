input {
  beats {
    port => 5044
  }
}

filter {
  if [fields][log_type] == "access" {
    dissect {
      mapping => {
        "message" => "%{ip} - - [%{log_datetime} %{}] %{message}"
      }
    }
  } else if [fields][log_type] == "error" {
    dissect {
      mapping => {
        "message" => "%{log_datetime} %{+log_datetime} %{level} %{} -- %{message}"
      }
    }
  } else {
    dissect {
      mapping => {
        "message" => "%{log_datetime} %{+log_datetime} %{} %{level} [%{code_path}] %{message}"
      }
    }
    
    mutate {
      strip => ["message"]
    }

    if [message] =~ /^status=\[REQUEST\]/ {
      grok {
        match => { "message" => "^(?m)%{GREEDYDATA:request_info} data=\[%{GREEDYDATA:data}\]" }
      }
      kv {
        source => "request_info"
        field_split => " "
        value_split => "="
        target => "request_info"
      }
      json {
        source => "data"
        target => "[request_info][data]"
      }
      
      mutate {
        remove_field => ["data"]
      }
      
      ruby {
        code => '
          def convert_to_location(event, field)
            value = event.get("[request_info][data][#{field}]")
            if value.is_a?(String)
              coordinates = value.split(/[|;]/).map { |coord| coord.split(",") }
              points = coordinates.map do |coords|
                lng = coords[1].to_f
                lat = coords[0].to_f
                { "lon" => lng, "lat" => lat }
              end
              event.set("[request_info][data][#{field}]", points)
            elsif value.is_a?(Array)
              points = value.map do |point|
                lng = point["lng"] || point["lon"] || point["x"] || point["XPos"]
                lat = point["lat"] || point["y"] || point["YPos"]
                if lng.is_a?(Numeric) && lat.is_a?(Numeric)
                  { "lon" => lng, "lat" => lat }
                else
                  point
                end
              end
              event.set("[request_info][data][#{field}]", points)
            elsif value.is_a?(Hash)
              lng = value["lng"] || value["lon"] || value["x"] || value["XPos"]
              lat = value["lat"] || value["y"] || value["YPos"]
              if lng.is_a?(Numeric) && lat.is_a?(Numeric)
                event.set("[request_info][data][#{field}]", { "lon" => lng, "lat" => lat })
              end
            end
          end

          ["location", "latlng", "origin", "origins", "destination", "destinations", "waypoints", "StartPoint", "GoalPoint", "ViaPoint", "ViaPoints", "SPoint", "EPoint", "SPointList", "points"].each do |field|
            convert_to_location(event, field)
          end
        '
      }
    }
  }
  
  date {
    match => ["log_datetime", "YYYY-MM-dd HH:mm:ss.SSS", "dd/MMM/YYYY:HH:mm:ss"]
    target => "datetime"
    timezone => "Asia/Seoul"
  }
  
  ruby {
    code => "event.set('index_day', event.get('datetime').time.localtime('+09:00').strftime('%Y%m%d'))"
  }
}


output {
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "%{[application]}-%{index_day}"
  }
}
